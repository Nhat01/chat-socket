<!DOCTYPE html>
<html lang="en">
   <head>
      <title>Messenger</title>
      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <meta http-equiv="X-UA-Compatible" content="ie=edge" />
      <link
         rel="stylesheet"
         href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css"
      />
      <link
         rel="stylesheet"
         href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css"
      />
      <link
         rel="stylesheet"
         href="https://cdnjs.cloudflare.com/ajax/libs/line-awesome/1.3.0/line-awesome/css/line-awesome.min.css"
      />
      <link
         rel="stylesheet"
         href="https://cdn.jsdelivr.net/gh/bbbootstrap/libraries@main/choices.min.css"
      />
      
      <link rel="stylesheet" href="../css/main.css" />
   </head>
   <body>
    <div class="main-wrapper">
        <div class="container">
           <div class="page-content">
              <div class="container">
                 <div class="row wrap">
                    <%- include('../partials/sideBarConversation'); %>
                    <%- include('../partials/content'); %>
                 </div>
              </div>
           </div>
        </div>
        <!-- Modal -->
        <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
         <div class="modal-dialog" role="document">
           <div class="modal-content">
             <div class="modal-header">
               <h5 class="modal-title" id="exampleModalLabel">Delete Conversation</h5>
               <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                 <span aria-hidden="true">&times;</span>
               </button>
             </div>
             <div class="modal-body">
               Are you sure you want to delete this conversation
             </div>
             <div class="modal-footer">
               <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
               <button type="submit" class="btn btn-primary" onclick="handleClickDeleteConversation()">Yes</button>
             </div>
           </div>
         </div>
       </div>
       <div class="modal fade" id="recallMessage" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
         <div class="modal-dialog" role="document">
           <div class="modal-content">
             <div class="modal-header">
               <h5 class="modal-title" id="exampleModalLabel">Delete Message</h5>
               <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                 <span aria-hidden="true">&times;</span>
               </button>
             </div>
             <div class="modal-body">
               Are you sure you want to delete this message
             </div>
             <div class="modal-footer">
               <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
               <button type="submit" class="btn btn-primary" onclick="handleClickDeleteMessage()">Yes</button>
             </div>
           </div>
         </div>
       </div>
      <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
         <div class="modal-dialog modal-dialog-centered" role="document">
         <form class="modal-content" id="createConvForm">
            <input name="user_id" value="<%= user._id %>" hidden>
            <div class="modal-header">
               <h5 class="modal-title" id="exampleModalLongTitle">Create a group chat</h5>
               <button type="button" class="close" data-dismiss="modal" aria-label="Close">
               <span aria-hidden="true">&times;</span>
               </button>
            </div>
            <div class="modal-body">
               <div>
                  <div class="container">
                  <div class="pb-3">
                     <div id="nameInputContainer" style="display: none">
                        <label for="name" class="font-weight-bold">Name</label>
                        <input
                        class="form-control"
                        id="name"
                        name="name"
                        type="text"
                        />
                     </div>
                     <div class="mt-3">
                        <label for="members" class="font-weight-bold">Members</label>
                        <select
                        class="form-control"
                        id="choices-multiple-remove-button"
                        placeholder="Select..."
                        multiple
                        name="selectOptions"
                        onchange="toggleNameInput()"
                        >
                        <% users.forEach(user => { %>
                           <option value="<%= user._id %>"><%= user.username %></option>
                        <% }) %>
                        </select>
                     </div>
                  </div>
                  </div>
               </form>
            </div>
            <div class="modal-footer">
               <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
               <button type="submit" class="btn btn-primary">Create</button>
            </div>
      </div>
     </div>
     
     <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.perfect-scrollbar/0.6.7/js/min/perfect-scrollbar.jquery.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.4/socket.io.js"></script>
     <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
     <script src="https://cdn.jsdelivr.net/gh/bbbootstrap/libraries@main/choices.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.js"></script>
     <script src="https://unpkg.com/@joeattardi/emoji-button@3"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/timeago.js/2.0.2/timeago.min.js"></script>
     <script>

        (function ($) {
           "use strict";
           var chatPanel = $(".scrollable-chat-panel").perfectScrollbar();

            
           var position = $(".chat-search").last().position().top;
           $(".scrollable-chat-panel").scrollTop(chatPanel.prop("scrollHeight"));
           $(".scrollable-chat-panel").perfectScrollbar("update");
           $(".pagination-scrool").perfectScrollbar();
         
           $(".chat-upload-trigger").on("click", function (e) {
              $(this).parent().find(".chat-upload").toggleClass("active");
           });
           $(".user-detail-trigger").on("click", function (e) {
              $(this)
                 .closest(".chat")
                 .find(".chat-user-detail")
                 .toggleClass("active");
           });
           $(".user-undetail-trigger").on("click", function (e) {
              $(this)
                 .closest(".chat")
                 .find(".chat-user-detail")
                 .toggleClass("active");
           });


        })(jQuery);
        
     </script>
     <script>
      var socket = io('/user-namespace', {
         auth: {
            token: '<%= user._id %>'
         },
      })


      socket.on("getOnlineUser", function (data) {
         $("#" + data.user_id + "_status").addClass("active")
         if (data.groupConversations && data.groupConversations.length > 0) {
            data.groupConversations.forEach(conversation => {
               // Kiểm tra xem trong cuộc trò chuyện có ít nhất một người dùng online không
               const hasOnlineMember = conversation.members.some(member => member.isOnline == 1);
               
               // Nếu có ít nhất một người dùng online, thêm lớp "active" vào phần tử status của cuộc trò chuyện
               if (hasOnlineMember) {
                  $(`#${conversation._id} .online-indicator`).addClass('active')
               }
            });
         }
      })

      socket.on("getOfflineUser", function (data) {
         $("#" + data.user_id + "_status").removeClass("active")
         data.groupConversations.forEach(conversation => {
            // Kiểm tra xem tất cả các thành viên của cuộc trò chuyện đều offline không
            const allMembersOffline = conversation.members.every(member => member.isOnline === 0);
            // Nếu tất cả thành viên đều offline, loại bỏ lớp "active" khỏi phần tử status của cuộc trò chuyện
            if (allMembersOffline) {
               $(`#${conversation._id} .online-indicator`).removeClass('active')
            }
         });
      })

      // Lắng nghe sự kiện input trên ô nhập tin nhắn
      $('#input-message').on('input', function() {
         const isTyping = $(this).val().trim().length > 0; // Kiểm tra xem có đang gõ tin nhắn không
         
         // Gửi thông điệp đến server báo hiệu người dùng đang gõ tin nhắn
         socket.emit('typing', { isTyping: isTyping, conversationId: '<%= conversation._id %>' });
      });

      $('#input-message').on('blur', function() {
         // Gửi thông điệp đến server báo hiệu người dùng không còn gõ tin nhắn nữa
         socket.emit('typing', { isTyping: false, conversationId: '<%= conversation._id %>' });
      });

      socket.on('typingNotification', function(data) {
         if (data.isTyping) {
            // Hiển thị thông báo khi người dùng đang gõ tin nhắn
            $('#message-container').append($('#wrap-loader'))
            $('#wrap-loader').addClass('active')
            var chatPanel = $(".scrollable-chat-panel").perfectScrollbar();
               $(".scrollable-chat-panel").scrollTop(chatPanel.prop("scrollHeight"));
         } else {
            // Xóa thông báo khi không có người dùng nào đang gõ tin nhắn
            $('#wrap-loader').removeClass('active')
            var chatPanel = $(".scrollable-chat-panel").perfectScrollbar();
               $(".scrollable-chat-panel").scrollTop(chatPanel.prop("scrollHeight"));
         }
      });

      socket.on("createRoom", function (data) {
         socket.emit("joinRoom",'<%= conversation._id %>')
      })
      

      $("#chat-form").submit(function (event) {
         event.preventDefault();
         var message = $("#input-message").val();
         $.ajax({
            url: "/message",
            type: "POST",
            data: {conversationId: '<%= conversation._id %>',sender: '<%= user._id %>', message: message},
            success: function(data) {
               if(data.success){
                  
                  $("#input-message").val('')
                  $('.emojionearea-editor').html("")
                  $('#last-con-<%= conversation._id %> span:first-child').text("Bạn: ")
                  $('#last-con-<%= conversation._id %> span:last-child').text(message)
                  $('#conversations').prepend($(`#${data.message.conversationId}`))
                  const timeAgoString = timeago().format(new Date(data.message.createdAt));
                  $(`#${data.message.conversationId} .timeago`).text(timeAgoString);
                  if(data.message.sender == '<%= user._id %>'){
                     let html = `
                     <div class="d-flex flex-row-reverse mb-2">
                        <div class="right-chat-message fs-13 mb-2">
                           <div class="mb-0">
                              <div class="d-flex flex-row">
                                 <div
                                    class="wrap-message"
                                    id="message-${data.message._id}"
                                 >
                                    ${data.message.message}
                                 </div>
                              </div>
                           </div>
                           <div class="message-options dark">
                              <div class="message-time">
                                 <div class="position-relative">
                                    <div>
                                       ${new Date(data.message.createdAt).toLocaleTimeString([],{hour: '2-digit', minute: '2-digit', hour12: false})}
                                    </div>
                                    <div
                                       class="trash-message"
                                       data-toggle="modal"
                                       data-target="#recallMessage"
                                       data-message-id=${data.message._id}
                                    >
                                       <i class="las la-trash-alt"></i>
                                    </div>
                                 </div>
                              </div>
                           </div>
                        </div>
                     </div>
                     `
                     $("#message-container").append(html)
                  } else {
                     let html = `
                     <div class="left-chat-message fs-13 mb-2">
                        <p class="mb-0" id="message-${data.message._id}">${data.message.message}</p>
                        <div class="message-time">${new Date(data.message.createdAt).toLocaleTimeString([],{hour: '2-digit', minute: '2-digit', hour12: false})}</div>
                        
                     </div>
                     `
                     $("#message-container").append(html)
                  }
               }
               var chatPanel = $(".scrollable-chat-panel").perfectScrollbar();
               $(".scrollable-chat-panel").scrollTop(chatPanel.prop("scrollHeight"));
               socket.emit("newChat", data.message)
               
            }
         })
      
         
      })

      socket.on("loadNewConversation", function (data){
         if(data.members.some(member => member._id == '<%= user._id %>')) {
            if(data.members.length > 2) {
               let html = `
                  <a
                     class="chat-item d-flex pl-3 pr-0 pt-3 pb-3"
                     href="/conversation/${data._id}"
                     onclick="clickConversation(${data._id})"
                     id=${data._id}
                  >
                     <div class="w-100">
                        <div class="d-flex pl-0">
                           <div class="mr-3 position-relative group-avatar">
                              <div class="avatar">
                                 <img
                                    src="../images/${data.members[0].profilePicture}"
                                    alt="User 1"
                                 />
                              </div>
                              <div class="avatar">
                                 <img
                                    src="../images/${data.members[1].profilePicture}"
                                    alt="User 2"
                                 />
                              </div>
                              <div class="avatar">
                                 <img
                                    src="../images/${data.members[2].profilePicture}"
                                    alt="User 3"
                                 />
                              </div>
                           </div>
                           <div>
                              <p class="margin-auto fw-400 text-dark-75">
                                 ${data.name}
                              </p>
                              <div class="d-flex flex-row mt-1">
                                 <span>
                                    <div class="svg15 double-check"></div>
                                 </span>
                                 <div
                                    class="d-flex flex-row mt-1"
                                    id="last-con-${data._id}"
                                 >
                                    <span class="fw-400 fs-13 mr-1 u-chat"></span>
                                    <span class="message-shortcut margin-auto fw-400 fs-13 mr-4 last-message"></span>
                                 </div>
                              </div>
                           </div>
                        </div>
                     </div>
                     <div class="flex-shrink-0 margin-auto pl-2 pr-3">
                        <div class="d-flex flex-column">
                           <p class="text-muted text-right fs-13 mb-2">08:21</p>
                           <span class="round badge badge-light-success margin-auto"
                              >2</span
                           >
                        </div>
                     </div>
                  </a>
                  `
            
            $("#chat-user").prepend(html)
            $("#chat-user-panel").scrollTop(0)
            } else {
               const otherMember =
                     data.members.filter(member => member._id !=
                     '<%= user._id %>')
               let html = `
            <a
               class="chat-item d-flex pl-3 pr-0 pt-3 pb-3"
               href="/conversation/${data._id}"
               onclick="clickConversation(${data._id})"
               id=${data._id}
            >
               <div class="w-100">
                  <div class="d-flex pl-0 wrap-avatar">
                     <div class="mr-3 position-relative group-avatar">
                        <img
                           class="rounded-circle shadow avatar-sm"
                           src="../images/${otherMember[0].profilePicture}"
                        />
                        <div
                           class="online-indicator"
                           id="${otherMember[0]._id}_status"
                        ></div>
                     </div>
                     <div>
                        <p class="margin-auto fw-400 text-dark-75">
                           ${otherMember[0].username}
                        </p>
                        <div
                                 class="d-flex flex-row mt-1"
                                 id="last-con-${data._id}"
                              >
                                 <span class="fw-400 fs-13 mr-1 u-chat"></span>
                                 <span
                                    class="message-shortcut margin-auto fw-400 fs-13 mr-4 last-message"
                                    ></span
                                 >
                              </div>
                     </div>
                  </div>
               </div>
               <div class="flex-shrink-0 margin-auto pl-2 pr-3">
                  <div class="d-flex flex-column">
                     <p class="text-muted text-right fs-13 mb-2">08:21</p>
                     <span class="round badge badge-light-success margin-auto"
                        >2</span
                     >
                  </div>
               </div>
            </a>
            `
            
            $("#chat-user").prepend(html)
            $("#chat-user-panel").scrollTop(0)
            }
            

         }
      }
      )

      socket.on("loadDeleteMessage", (data) => {
         console.log(data);
         $(`#message-${data.messageId}`).html(data.message)
      })
      
      $("#createConvForm").submit(function (event) {
            event.preventDefault();
            const selectElement = document.getElementById('choices-multiple-remove-button');
            
            const selectedOptions = Array.from(selectElement.selectedOptions);
            const selectedValues = selectedOptions.map(option => option.value);
            if (selectedValues.length == 0) {
               alert('Vui lòng chọn ít nhất một giá trị.');
            } else {
               let formData = $(this).serialize();
               $.ajax({
               url: "/conversation",
               type: "POST",
               data: formData,
               success: function(data) {
                  if(data.success) {
                     socket.emit('newConversation', data.message);
                     window.location.href = `/conversation/${data.message._id}`;
                  } else {
                     window.location.reload();
                  }
               }
               })
            }
         })
      

      socket.on("loadNewChat", function(data) {
         if(data.sender == '<%= user._id %>'){
            
         } else {
            $('#conversations').prepend($(`#${data.conversationId}`))
            const timeAgoString = timeago().format(new Date(data.createdAt));
            $(`#${data.conversationId} .timeago`).text(timeAgoString);
            let html = `
            <div class="left-chat-message fs-13 mb-2">
               <p class="mb-0" id="message-${data._id}">
                  ${data.image ? 
                     `<img src="../fileUploads/${data.image}" alt="Image" width="100">` :
                     data.file ? `<i class="bi bi-file-earmark-text"></i> <a class='file-download' href="../fileUploads/${data.file}<" download>${data.message}</a>`:
                     `${data.message}`
                  }
               </p>
               <div class="message-time">${new Date(data.createdAt).toLocaleTimeString([],{hour: '2-digit', minute: '2-digit', hour12: false})}</div>
               
            </div>
            `
            $("#message-container").append(html)
         }
         var chatPanel = $(".scrollable-chat-panel").perfectScrollbar();
         $(".scrollable-chat-panel").scrollTop(chatPanel.prop("scrollHeight"));
         $('#message-container').append($('#wrap-loader'))
      })

      socket.on("loadLatestChat", function(data) {
         $('#conversations').prepend($(`#${data.conversationId}`))
            const timeAgoString = timeago().format(new Date(data.createdAt));
            $(`#last-con-${data.conversationId} span:first-child`).text(data.senderName + ': ')
            if(data.file) {
               $(`#last-con-${data.conversationId} span:last-child`).text("file đính kèm")
            } else if(data.image){
               $(`#last-con-${data.conversationId} span:last-child`).text("hình ảnh")
            } else {
               $(`#last-con-${data.conversationId} span:last-child`).text(data.message)
            }
      })
      
      socket.on("loadDeleteConversation", function(data) {
         var conversationElement = $(`#${data}`)
         conversationElement.remove()
      })
      function selectUser(index) {
        document.querySelector('.chat-item.active').classList.remove('active');

        document.querySelectorAll('.chat-item')[index].classList.add('active');

        activeIndex = index;
      }
      
      function handleClickDeleteConversation(){
         const conversationId = $('#exampleModal .modal-content').data("dataId")
        
         $.ajax({
            url: `/conversation/delete/${conversationId}`,
            type: 'DELETE',
            success: function (data) {
               socket.emit('deleteConversation', conversationId)
                  window.location.replace("/")
            },
            error: function (error) {
               window.location.replace("/")
            }
         });
      }

      function handleClickDeleteMessage(){
         const messageId = $('#recallMessage .modal-content').data("dataMessageId")
         console.log($('#recallMessage .modal-content'));
         console.log('message-id:', messageId);
         $.ajax({
            url: `/message/delete/${messageId}`,
            type: 'PUT',
            success: function (data) {
               if(data.success) {
                  console.log($(`#message-${messageId}`));
                  $(`#message-${messageId}`).html(data.message)
                  $('#recallMessage').modal('hide');
                  let data_message = {
                     conversationId: data.conversationId,
                     messageId: messageId,
                     message: data.message
                  }
                  socket.emit("recallMessage", data_message)
               }
            },
            error: function (error) {
               window.location.replace("/")
            }
         });
      
      }

      function clickConversation(id) {
         socket.emit("leaveRoom", '<%= conversation._id %>')
      }

      $('#exampleModal').on('show.bs.modal', function (event) {

         var button = $(event.relatedTarget);

         var conversationId = button.data('conversation-id');

         $('#exampleModal .modal-content').data('data-id', conversationId)
      });

      $('#recallMessage').on('show.bs.modal', function (event) {

         var button = $(event.relatedTarget);

         var messageId = button.data('message-id');
         console.log('data-message-id:', messageId);

         $('#recallMessage .modal-content').data('data-message-id', messageId)
      });

      
      var multipleCancelButton = new Choices(
            "#choices-multiple-remove-button",
            {
               removeItemButton: true,
               searchResultLimit: 5,
               renderChoiceLimit: 5,
            }
         )

      function toggleNameInput() {
         const selectElement = document.getElementById('choices-multiple-remove-button');
         const nameInput = document.getElementById("name")
         const selectedOptions = Array.from(selectElement.selectedOptions);
         const selectedValues = selectedOptions.map(option => option.value);
         const nameInputContainer = document.getElementById('nameInputContainer');
         nameInputContainer.style.display = selectedValues.length > 1 ? 'block' : 'none';
         multipleCancelButton.hideDropdown()
         if (selectedValues.length > 1) {
            nameInput.setAttribute("required", "true");
         }
      }
         function handleSubmit(event) {
            const selectElement = document.getElementById('choices-multiple-remove-button');
            
            const selectedOptions = Array.from(selectElement.selectedOptions);
            const selectedValues = selectedOptions.map(option => option.value);

            if (selectedValues.length == 0) {
               alert('Vui lòng chọn ít nhất một giá trị.');
               event.preventDefault(); 
            }
         }
         

         $('#fileInput').change((e) => {
            let fileInput = e.target;
            if (fileInput.files.length > 0) {
               let file = fileInput.files[0];
               let formData = new FormData();
               formData.append('file', file);
               formData.append('conversationId', '<%= conversation._id %>');
               formData.append('sender', '<%= user._id %>');

               $.ajax({
                     url: "/message/upload",
                     type: "POST",
                     data: formData,
                     processData: false,
                     contentType: false,
                     success: function(data) {
                        if(data.success){
                           $('.emojionearea-editor').html("")
                           $('#last-con-<%= conversation._id %> span:first-child').text("Bạn: ")
                           if(data.message.file) {
                              $('#last-con-<%= conversation._id %> span:last-child').text("file đính kèm")
                           } else{
                              $('#last-con-<%= conversation._id %> span:last-child').text("hình ảnh")
                           }
                           if(data.message.sender == '<%= user._id %>'){
                              let html = `
                              <div class="d-flex flex-row-reverse mb-2">
                                 <div class="right-chat-message fs-13 mb-2">
                                    <div class="mb-0">
                                       <div class="d-flex flex-row">
                                          <div
                                             class="wrap-message"
                                             id="message-${data.message._id}"
                                          >
                                             ${data.message.image ? 
                                                `<img src="../fileUploads/${data.message.image}" alt="Image" width="100">`:
                                                data.message.file ? `<i class="bi bi-file-earmark-text"></i> <a class='file-download' href="../fileUploads/${data.message.file}<" download>${data.message.message}</a>`:
                                                `${data.message.message}`
                                             }
                                          </div>
                                          
                                       </div>
                                    </div>
                                    <div class="message-options dark">
                                       <div class="message-time">
                                          <div class="position-relative">
                                             <div>
                                                ${new Date(data.message.createdAt).toLocaleTimeString([],{hour: '2-digit', minute: '2-digit', hour12: false})}
                                             </div>
                                             <div
                                                class="trash-message"
                                                data-toggle="modal"
                                                data-target="#recallMessage"
                                                data-message-id=${data.message._id}
                                             >
                                                <i class="las la-trash-alt"></i>
                                             </div>
                                          </div>
                                       </div>
                                    </div>
                                 </div>
                              </div>
                              `
                              $("#message-container").append(html)
                           } else {
                              let html = `
                              <div class="left-chat-message fs-13 mb-2">
                                 <p class="mb-0">${data.message.image ? `<img src="../fileUploads/${data.message.image}" alt="Image" width="100">`: data.message.file ? `<i class="bi bi-file-earmark-text"></i> <a class='file-download' href="../fileUploads/${data.message.file}<" download>${data.message.message}</a>`:
                                                `${data.message.message}`}</p>
                                 <div class="message-time">${new Date(data.message.createdAt).toLocaleTimeString([],{hour: '2-digit', minute: '2-digit', hour12: false})}</div>
                              </div>
                              `
                              $("#message-container").append(html)
                           }
                        }
                        var chatPanel = $(".scrollable-chat-panel").perfectScrollbar();
                        $(".scrollable-chat-panel").scrollTop(chatPanel.prop("scrollHeight"));
                        $(".chat-upload-trigger").parent().find(".chat-upload").removeClass("active");
                        socket.emit("newChat", data.message)
                     },
                     error: function(xhr, status, error) {
                        console.error(error);
                     }
               });
            }
         })

         $(document).ready(function() {
           
            const inputMessage = document.getElementById('input-message');
            const emojiButton = document.getElementById('emoji-button');
            
            const picker = new EmojiButton();
            
            picker.on('emoji', emoji => {
                  inputMessage.value += emoji;
            });
            
            emojiButton.addEventListener('click', () => {
                  picker.togglePicker(emojiButton);
            });

            const timeAgoElements = document.querySelectorAll('.timeago');
        
            timeAgoElements.forEach(function (element) {
                  const createdAt = element.getAttribute('data-created-at');
                  if(createdAt) {

                     const timeAgoString = timeago().format(new Date(createdAt));
                     element.textContent = timeAgoString;
                  }
            });
         });
         document.querySelector('.form-control').addEventListener('input', function(event) {
            const keyword = event.target.value.trim(); // Lấy từ khóa tìm kiếm, loại bỏ khoảng trắng ở đầu và cuối
            const conversations = document.querySelectorAll('.conversation-container');
            
            conversations.forEach(conversation => {
               const conversationName = conversation.querySelector('.fw-400.text-dark-75').innerText;
               if (conversationName.toLowerCase().includes(keyword.toLowerCase())) {
                     conversation.style.display = 'block'; // Hiển thị cuộc trò chuyện nếu tên chứa từ khóa
               } else {
                     conversation.style.display = 'none'; // Ẩn cuộc trò chuyện nếu tên không chứa từ khóa
               }
            });
         });
     </script>
   </body>
</html>
